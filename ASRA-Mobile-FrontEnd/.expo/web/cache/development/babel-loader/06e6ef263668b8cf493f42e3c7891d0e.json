{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = domNodeToHTMLString;\n\nvar _stringifyEntities = _interopRequireDefault(require(\"stringify-entities\"));\n\nvar _transientRenderEngine = require(\"@native-html/transient-render-engine\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction renderOpeningTag(tag, attributes) {\n  var strAttributes = [];\n  Object.keys(attributes).forEach(function (key) {\n    strAttributes.push(key + \"=\\\"\" + (0, _stringifyEntities.default)(\"\" + attributes[key]) + \"\\\"\");\n  });\n  return \"<\" + tag + (strAttributes.length ? ' ' : '') + strAttributes.join(' ') + \">\";\n}\n\nfunction domNodeToHTMLString(root, reporter) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var html = '';\n\n  if ((0, _transientRenderEngine.isDomElement)(root)) {\n    var strChildren = root.children.reduce(function (prev, curr) {\n      var convertedNode = domNodeToHTMLString(curr, reporter, depth + 1);\n      return \"\" + prev + convertedNode;\n    }, '');\n    html = \"\" + renderOpeningTag(root.tagName, root.attribs) + strChildren + \"</\" + root.tagName + \">\";\n  } else if ((0, _transientRenderEngine.isDomText)(root)) {\n    var text = (0, _stringifyEntities.default)(root.data);\n    html = text;\n  }\n\n  typeof reporter === 'function' && reporter(root, depth, html);\n  return html;\n}","map":{"version":3,"sources":["domNodeToHTMLString.ts"],"names":["strAttributes","Object","key","attributes","tag","depth","html","strChildren","convertedNode","domNodeToHTMLString","prev","renderOpeningTag","root","text","reporter"],"mappings":";;;;;;;AAAA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,sCAAA,CAAA;;;;;;;;AAMA,SAAA,gBAAA,CAAA,GAAA,EAAA,UAAA,EAA2E;EACzE,IAAMA,aAAuB,GAA7B,EAAA;EACAC,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAiCC,UAAAA,GAAD,EAAS;IACvCF,aAAa,CAAbA,IAAAA,CAAsBE,GAAtBF,WAA8B,CAAA,GAAA,kBAAA,CAAA,OAAA,OAAoBG,UAAU,CAA5DH,GAA4D,CAA9B,CAA9BA;EADFC,CAAAA;EAGA,aAAWG,GAAX,IAAiBJ,aAAa,CAAbA,MAAAA,GAAAA,GAAAA,GAA6B,EAA9C,IAAmDA,aAAa,CAAbA,IAAAA,CAAnD,GAAmDA,CAAnD;AACD;;AAUc,SAAA,mBAAA,CAAA,IAAA,EAAA,QAAA,EAIb;EAAA,IADAK,KACA,uEAJa,CAIb;EACA,IAAIC,IAAI,GAAR,EAAA;;EACA,IAAI,CAAA,GAAA,sBAAA,CAAA,YAAA,EAAJ,IAAI,CAAJ,EAAwB;IACtB,IAAMC,WAAW,GAAG,IAAI,CAAJ,QAAA,CAAA,MAAA,CAAqB,UAAA,IAAA,EAAA,IAAA,EAAgB;MACvD,IAAMC,aAAa,GAAGC,mBAAmB,CAAA,IAAA,EAAA,QAAA,EAAiBJ,KAAK,GAA/D,CAAyC,CAAzC;MACA,YAAUK,IAAV,GAAA,aAAA;IAFkB,CAAA,EAApB,EAAoB,CAApB;IAIAJ,IAAI,QAAMK,gBAAgB,CAACC,IAAI,CAAL,OAAA,EAAeA,IAAI,CAAnB,OAAA,CAAtB,GAAqDL,WAArD,UACFK,IAAI,CADNN,OAAI,MAAJA;EALF,CAAA,MAQO,IAAI,CAAA,GAAA,sBAAA,CAAA,SAAA,EAAJ,IAAI,CAAJ,EAAqB;IAC1B,IAAMO,IAAI,GAAG,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAiBD,IAAI,CAAlC,IAAa,CAAb;IACAN,IAAI,GAAJA,IAAAA;EACD;;EACD,OAAA,QAAA,KAAA,UAAA,IAAkCQ,QAAQ,CAAA,IAAA,EAAA,KAAA,EAA1C,IAA0C,CAA1C;EACA,OAAA,IAAA;AACD","sourcesContent":["import strigifyEntities from 'stringify-entities';\nimport {\n  Node,\n  isDomText,\n  isDomElement\n} from '@native-html/transient-render-engine';\n\nfunction renderOpeningTag(tag: string, attributes: Record<string, string>) {\n  const strAttributes: string[] = [];\n  Object.keys(attributes).forEach((key) => {\n    strAttributes.push(`${key}=\"${strigifyEntities(`${attributes[key]}`)}\"`);\n  });\n  return `<${tag}${strAttributes.length ? ' ' : ''}${strAttributes.join(' ')}>`;\n}\n\n/**\n * Convert a DOM node to its HTML representation.\n *\n * @param root - The root to stringify.\n * @param reporter - An optional function which will receive every\n * parsed node as 1st argument, the depth as 2d argument and the converted html\n * as 3d argument.\n */\nexport default function domNodeToHTMLString(\n  root: Node | null,\n  reporter?: DomNodeToHtmlReporter,\n  depth = 0\n) {\n  let html = '';\n  if (isDomElement(root)) {\n    const strChildren = root.children.reduce((prev, curr) => {\n      const convertedNode = domNodeToHTMLString(curr, reporter, depth + 1);\n      return `${prev}${convertedNode}`;\n    }, '');\n    html = `${renderOpeningTag(root.tagName, root.attribs)}${strChildren}</${\n      root.tagName\n    }>`;\n  } else if (isDomText(root)) {\n    const text = strigifyEntities(root.data);\n    html = text;\n  }\n  typeof reporter === 'function' && reporter(root, depth, html);\n  return html;\n}\n\n/**\n * @public\n */\nexport interface DomNodeToHtmlReporter {\n  /**\n   * @param node - The node being parsed.\n   * @param depth - How many parents this node have.\n   * @param html - The HTML representation of this node and its children.\n   */\n  (node: Node | null, depth: number, html: string): void;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildTREFromConfig;\n\nvar _transientRenderEngine = _interopRequireDefault(require(\"@native-html/transient-render-engine\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction buildTREFromConfig(props) {\n  var allowedStyles = props.allowedStyles,\n      _props$ignoredStyles = props.ignoredStyles,\n      ignoredStyles = _props$ignoredStyles === void 0 ? [] : _props$ignoredStyles,\n      ignoredDomTags = props.ignoredDomTags,\n      ignoreDomNode = props.ignoreDomNode,\n      domVisitors = props.domVisitors,\n      htmlParserOptions = props.htmlParserOptions,\n      baseStyle = props.baseStyle,\n      classesStyles = props.classesStyles,\n      tagsStyles = props.tagsStyles,\n      idsStyles = props.idsStyles,\n      enableCSSInlineProcessing = props.enableCSSInlineProcessing,\n      enableUserAgentStyles = props.enableUserAgentStyles,\n      _props$systemFonts = props.systemFonts,\n      systemFonts = _props$systemFonts === void 0 ? [] : _props$systemFonts,\n      _props$fallbackFonts = props.fallbackFonts,\n      fallbackFonts = _props$fallbackFonts === void 0 ? {} : _props$fallbackFonts,\n      _props$customHTMLElem = props.customHTMLElementModels,\n      customHTMLElementModels = _props$customHTMLElem === void 0 ? {} : _props$customHTMLElem,\n      emSize = props.emSize,\n      setMarkersForTNode = props.setMarkersForTNode,\n      selectDomRoot = props.selectDomRoot,\n      dangerouslyDisableHoisting = props.dangerouslyDisableHoisting,\n      dangerouslyDisableWhitespaceCollapsing = props.dangerouslyDisableWhitespaceCollapsing;\n  var customizeHTMLModels = Object.keys(customHTMLElementModels).length ? function (defaultModels) {\n    return _objectSpread(_objectSpread({}, defaultModels), customHTMLElementModels);\n  } : undefined;\n  var fontMap = {};\n  systemFonts.forEach(function (font) {\n    fontMap[font] = true;\n  });\n\n  var isFontSupported = function isFontSupported(fontFamily) {\n    if (fallbackFonts[fontFamily]) {\n      return fallbackFonts[fontFamily];\n    }\n\n    return fontMap[fontFamily] || false;\n  };\n\n  return new _transientRenderEngine.default({\n    customizeHTMLModels: customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported: isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: _objectSpread({\n      decodeEntities: true\n    }, htmlParserOptions),\n    stylesConfig: {\n      baseStyle: baseStyle,\n      enableCSSInlineProcessing: enableCSSInlineProcessing,\n      enableUserAgentStyles: enableUserAgentStyles,\n      classesStyles: classesStyles,\n      idsStyles: idsStyles,\n      tagsStyles: tagsStyles\n    },\n    ignoredDomTags: ignoredDomTags,\n    ignoreDomNode: ignoreDomNode,\n    domVisitors: domVisitors,\n    setMarkersForTNode: setMarkersForTNode,\n    selectDomRoot: selectDomRoot,\n    dangerouslyDisableHoisting: dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing: dangerouslyDisableWhitespaceCollapsing\n  });\n}","map":{"version":3,"sources":["buildTREFromConfig.ts"],"names":["ignoredStyles","systemFonts","fallbackFonts","customHTMLElementModels","dangerouslyDisableWhitespaceCollapsing","customizeHTMLModels","defaultModels","fontMap","font","isFontSupported","fontFamily","TRenderEngine","cssProcessorConfig","inlinePropertiesBlacklist","inlinePropertiesWhitelist","rootFontSize","emSize","htmlParserOptions","decodeEntities","stylesConfig","baseStyle","enableCSSInlineProcessing","enableUserAgentStyles","classesStyles","idsStyles","tagsStyles","ignoredDomTags","ignoreDomNode","domVisitors","setMarkersForTNode","selectDomRoot","dangerouslyDisableHoisting"],"mappings":";;;;;;;;;;;;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,sCAAA,CAAA,CAAA;;;;;;;;AAae,SAAA,kBAAA,CAAA,KAAA,EAAwD;EACrE,IAAM,aAAN,GAAA,KAAA,CAAM,aAAN;EAAA,2BAAA,KAAA,CAGEA,aAHF;EAAA,IAGEA,aAHF,qCAAM,EAAN;EAAA,IAAM,cAAN,GAAA,KAAA,CAAM,cAAN;EAAA,IAAM,aAAN,GAAA,KAAA,CAAM,aAAN;EAAA,IAAM,WAAN,GAAA,KAAA,CAAM,WAAN;EAAA,IAAM,iBAAN,GAAA,KAAA,CAAM,iBAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAAM,aAAN,GAAA,KAAA,CAAM,aAAN;EAAA,IAAM,UAAN,GAAA,KAAA,CAAM,UAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAAM,yBAAN,GAAA,KAAA,CAAM,yBAAN;EAAA,IAAM,qBAAN,GAAA,KAAA,CAAM,qBAAN;EAAA,yBAAA,KAAA,CAcEC,WAdF;EAAA,IAcEA,WAdF,mCAAM,EAAN;EAAA,2BAAA,KAAA,CAeEC,aAfF;EAAA,IAeEA,aAfF,qCAAM,EAAN;EAAA,4BAAA,KAAA,CAgBEC,uBAhBF;EAAA,IAgBEA,uBAhBF,sCAAM,EAAN;EAAA,IAAM,MAAN,GAAA,KAAA,CAAM,MAAN;EAAA,IAAM,kBAAN,GAAA,KAAA,CAAM,kBAAN;EAAA,IAAM,aAAN,GAAA,KAAA,CAAM,aAAN;EAAA,IAAM,0BAAN,GAAA,KAAA,CAAM,0BAAN;EAAA,IAqBEC,sCArBF,GAAA,KAAA,CAqBEA,sCArBF;EAuBA,IAAMC,mBAAmB,GAAG,MAAM,CAAN,IAAA,CAAA,uBAAA,EAAA,MAAA,GACvBC,UAAAA,aAAD,EAAuE;IACrE,uCAAO,aAAP,GAA8BH,uBAA9B;EAFsB,CAAA,GAA5B,SAAA;EAKA,IAAMI,OAAO,GAAb,EAAA;EACAN,WAAW,CAAXA,OAAAA,CAAqBO,UAAAA,IAAD,EAAU;IAC5BD,OAAO,CAAPA,IAAO,CAAPA,GAAAA,IAAAA;EADFN,CAAAA;;EAGA,IAAMQ,eAAe,GAAIC,SAAnBD,eAAmBC,CAAAA,UAAD,EAAwB;IAC9C,IAAIR,aAAa,CAAjB,UAAiB,CAAjB,EAA6D;MAC3D,OAAOA,aAAa,CAApB,UAAoB,CAApB;IACD;;IAED,OAAOK,OAAO,CAAPA,UAAO,CAAPA,IAAP,KAAA;EALF,CAAA;;EAOA,OAAO,IAAII,sBAAAA,CAAJ,OAAA,CAAkB;IACvBN,mBADuB,EACvBA,mBADuB;IAEvBO,kBAAkB,EAAE;MAClBH,eADkB,EAClBA,eADkB;MAElBI,yBAAyB,EAFP,aAAA;MAGlBC,yBAAyB,EAHP,aAAA;MAIlBC,YAAY,EAAEC;IAJI,CAFG;IAQvBC,iBAAiB;MACfC,cAAc,EADG;IAAF,GAEZD,iBAFY,CARM;IAYvBE,YAAY,EAAE;MACZC,SADY,EACZA,SADY;MAEZC,yBAFY,EAEZA,yBAFY;MAGZC,qBAHY,EAGZA,qBAHY;MAIZC,aAJY,EAIZA,aAJY;MAKZC,SALY,EAKZA,SALY;MAMZC,UAAAA,EAAAA;IANY,CAZS;IAoBvBC,cApBuB,EAoBvBA,cApBuB;IAqBvBC,aArBuB,EAqBvBA,aArBuB;IAsBvBC,WAtBuB,EAsBvBA,WAtBuB;IAuBvBC,kBAvBuB,EAuBvBA,kBAvBuB;IAwBvBC,aAxBuB,EAwBvBA,aAxBuB;IAyBvBC,0BAzBuB,EAyBvBA,0BAzBuB;IA0BvB3B,sCAAAA,EAAAA;EA1BuB,CAAlB,CAAP;AA4BD","sourcesContent":["import { TRenderEngineConfig } from '../shared-types';\nimport TRenderEngine, {\n  HTMLModelRecord,\n  TagName\n} from '@native-html/transient-render-engine';\n\n/**\n * Build a {@link TRenderEngine} instance from a configuration object.\n *\n * @remarks This utility can be useful to test and debug the TRE layer of your\n * application.\n *\n * @param props - The configuration from which a TRE should be built.\n */\nexport default function buildTREFromConfig(props: TRenderEngineConfig) {\n  const {\n    allowedStyles,\n    // TODO fix upstream\n    ignoredStyles = [],\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    htmlParserOptions,\n    baseStyle,\n    classesStyles,\n    tagsStyles,\n    idsStyles,\n    enableCSSInlineProcessing,\n    enableUserAgentStyles,\n    systemFonts = [],\n    fallbackFonts = {},\n    customHTMLElementModels = {},\n    emSize,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  } = props;\n  const customizeHTMLModels = Object.keys(customHTMLElementModels).length\n    ? (defaultModels: HTMLModelRecord<TagName>): HTMLModelRecord<TagName> => {\n        return { ...defaultModels, ...customHTMLElementModels };\n      }\n    : undefined;\n  const fontMap = {} as Record<string, true>;\n  systemFonts.forEach((font) => {\n    fontMap[font] = true;\n  });\n  const isFontSupported = (fontFamily: string) => {\n    if (fallbackFonts[fontFamily as keyof typeof fallbackFonts]) {\n      return fallbackFonts[fontFamily as keyof typeof fallbackFonts];\n    }\n    /* istanbul ignore next */\n    return fontMap[fontFamily] || false;\n  };\n  return new TRenderEngine({\n    customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: {\n      decodeEntities: true,\n      ...htmlParserOptions\n    },\n    stylesConfig: {\n      baseStyle,\n      enableCSSInlineProcessing,\n      enableUserAgentStyles,\n      classesStyles,\n      idsStyles,\n      tagsStyles\n    },\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  });\n}\n"]},"metadata":{},"sourceType":"script"}
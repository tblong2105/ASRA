{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useImageSpecifiedDimensions;\n\nvar _react = require(\"react\");\n\nvar _getDimensionsWithAspectRatio = _interopRequireDefault(require(\"./getDimensionsWithAspectRatio\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction normalizeSize(dimension, options) {\n  var containerDimension = options.containerDimension || null;\n  var enablePercentWidth = options.enablePercentWidth || false;\n\n  if (dimension === null || dimension === undefined || Number.isNaN(dimension)) {\n    return null;\n  }\n\n  if (typeof dimension === 'number') {\n    return dimension;\n  }\n\n  if (dimension.search('%') !== -1 && enablePercentWidth && typeof containerDimension === 'number') {\n    return parseFloat(dimension) * containerDimension / 100;\n  } else if (dimension.trim().match(/^[\\d.]+$/)) {\n    return parseFloat(dimension);\n  }\n\n  return null;\n}\n\nfunction deriveSpecifiedDimensionsFromProps(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      contentWidth = _ref.contentWidth,\n      flatStyle = _ref.flatStyle,\n      enablePercentWidth = _ref.enableExperimentalPercentWidth;\n  var normalizeOptionsWidth = {\n    enablePercentWidth: enablePercentWidth,\n    containerDimension: contentWidth\n  };\n  var normalizeOptionsHeight = {\n    enablePercentWidth: false\n  };\n  var widthProp = normalizeSize(width, normalizeOptionsWidth);\n  var heightProp = normalizeSize(height, normalizeOptionsHeight);\n  var styleWidth = normalizeSize(flatStyle.width, normalizeOptionsWidth);\n  var styleHeight = normalizeSize(flatStyle.height, normalizeOptionsHeight);\n  return (0, _getDimensionsWithAspectRatio.default)(styleWidth !== null && styleWidth !== void 0 ? styleWidth : widthProp, styleHeight !== null && styleHeight !== void 0 ? styleHeight : heightProp, flatStyle.aspectRatio);\n}\n\nfunction useImageSpecifiedDimensions(props) {\n  var contentWidth = props.contentWidth,\n      enableExperimentalPercentWidth = props.enableExperimentalPercentWidth,\n      style = props.style,\n      width = props.width,\n      height = props.height;\n  var flatStyle = (0, _react.useMemo)(function () {\n    return _reactNative.StyleSheet.flatten(style) || {};\n  }, [style]);\n  var specifiedDimensions = (0, _react.useMemo)(function () {\n    return deriveSpecifiedDimensionsFromProps({\n      contentWidth: contentWidth,\n      enableExperimentalPercentWidth: enableExperimentalPercentWidth,\n      width: width,\n      height: height,\n      flatStyle: flatStyle\n    });\n  }, [contentWidth, enableExperimentalPercentWidth, flatStyle, height, width]);\n  return {\n    flatStyle: flatStyle,\n    specifiedDimensions: specifiedDimensions\n  };\n}","map":{"version":3,"sources":["useImageSpecifiedDimensions.ts"],"names":["containerDimension","options","enablePercentWidth","dimension","Number","parseFloat","enableExperimentalPercentWidth","normalizeOptionsWidth","contentWidth","normalizeOptionsHeight","widthProp","normalizeSize","heightProp","styleWidth","flatStyle","styleHeight","height","StyleSheet","specifiedDimensions","deriveSpecifiedDimensionsFromProps","width"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport {\n  UseIMGElementStateProps,\n  IncompleteImageDimensions\n} from './img-types';\nimport getDimensionsWithAspectRatio from './getDimensionsWithAspectRatio';\nimport { StyleSheet } from 'react-native';\n\nfunction normalizeSize(\n  dimension: string | number | null | undefined,\n  options: Partial<{\n    containerDimension: number | null;\n    enablePercentWidth: boolean;\n  }>\n) {\n  const containerDimension = options.containerDimension || null;\n  const enablePercentWidth = options.enablePercentWidth || false;\n  if (\n    dimension === null ||\n    dimension === undefined ||\n    Number.isNaN(dimension)\n  ) {\n    return null;\n  }\n  if (typeof dimension === 'number') {\n    return dimension;\n  }\n  if (\n    dimension.search('%') !== -1 &&\n    enablePercentWidth &&\n    typeof containerDimension === 'number'\n  ) {\n    return (parseFloat(dimension) * containerDimension) / 100;\n  } else if (dimension.trim().match(/^[\\d.]+$/)) {\n    return parseFloat(dimension);\n  }\n  return null;\n}\n\n/**\n * Extract specified dimensions from props.\n */\nfunction deriveSpecifiedDimensionsFromProps({\n  width,\n  height,\n  contentWidth,\n  flatStyle,\n  enableExperimentalPercentWidth: enablePercentWidth\n}: Pick<\n  UseIMGElementStateProps,\n  'width' | 'height' | 'contentWidth' | 'enableExperimentalPercentWidth'\n> & { flatStyle: Record<string, any> }): IncompleteImageDimensions {\n  const normalizeOptionsWidth = {\n    enablePercentWidth,\n    containerDimension: contentWidth\n  };\n  const normalizeOptionsHeight = {\n    enablePercentWidth: false\n  };\n  const widthProp = normalizeSize(width, normalizeOptionsWidth);\n  const heightProp = normalizeSize(height, normalizeOptionsHeight);\n  const styleWidth = normalizeSize(flatStyle.width, normalizeOptionsWidth);\n  const styleHeight = normalizeSize(flatStyle.height, normalizeOptionsHeight);\n  return getDimensionsWithAspectRatio(\n    styleWidth ?? widthProp,\n    styleHeight ?? heightProp,\n    flatStyle.aspectRatio\n  );\n}\n\nexport default function useImageSpecifiedDimensions(\n  props: UseIMGElementStateProps\n) {\n  const { contentWidth, enableExperimentalPercentWidth, style, width, height } =\n    props;\n  const flatStyle = useMemo(() => StyleSheet.flatten(style) || {}, [style]);\n  const specifiedDimensions = useMemo(\n    () =>\n      deriveSpecifiedDimensionsFromProps({\n        contentWidth,\n        enableExperimentalPercentWidth,\n        width,\n        height,\n        flatStyle\n      }),\n    [contentWidth, enableExperimentalPercentWidth, flatStyle, height, width]\n  );\n  return { flatStyle, specifiedDimensions };\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = splitBoxModelStyle;\n\nvar _pick = _interopRequireDefault(require(\"ramda/src/pick\"));\n\nvar _omit = _interopRequireDefault(require(\"ramda/src/omit\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar borderBoxProps = ['backgroundColor', 'borderBottomColor', 'borderBottomLeftRadius', 'borderBottomRightRadius', 'borderBottomWidth', 'borderLeftColor', 'borderLeftWidth', 'borderRightColor', 'borderRightWidth', 'borderStyle', 'borderTopColor', 'borderTopLeftRadius', 'borderTopRightRadius', 'borderTopWidth', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'marginBottom', 'marginLeft', 'marginRight', 'marginTop'];\nvar pickBorderBox = (0, _pick.default)(borderBoxProps);\nvar omitBorderBox = (0, _omit.default)(borderBoxProps);\n\nfunction splitBoxModelStyle(style) {\n  return {\n    boxModelStyle: pickBorderBox(style),\n    otherStyle: omitBorderBox(style)\n  };\n}","map":{"version":3,"sources":["splitBoxModelStyle.ts"],"names":["borderBoxProps","pickBorderBox","omitBorderBox","boxModelStyle","otherStyle"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;AAGA,IAAMA,cAAc,GAAG,CAAA,iBAAA,EAAA,mBAAA,EAAA,wBAAA,EAAA,yBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,sBAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,aAAA,EAAA,cAAA,EAAA,YAAA,EAAA,cAAA,EAAA,YAAA,EAAA,aAAA,EAAvB,WAAuB,CAAvB;AAyBA,IAAMC,aAAa,GAAG,CAAA,GAAA,KAAA,CAAA,OAAA,EAAtB,cAAsB,CAAtB;AACA,IAAMC,aAAa,GAAG,CAAA,GAAA,KAAA,CAAA,OAAA,EAAtB,cAAsB,CAAtB;;AASe,SAAA,kBAAA,CAAA,KAAA,EAEb;EACA,OAAO;IACLC,aAAa,EAAEF,aAAa,CADvB,KACuB,CADvB;IAELG,UAAU,EAAEF,aAAa,CAAA,KAAA;EAFpB,CAAP;AAID","sourcesContent":["import pick from 'ramda/src/pick';\nimport omit from 'ramda/src/omit';\nimport { TNodeShape, TNodeType } from '@native-html/transient-render-engine';\n\nconst borderBoxProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderBottomLeftRadius',\n  'borderBottomRightRadius',\n  'borderBottomWidth',\n  'borderLeftColor',\n  'borderLeftWidth',\n  'borderRightColor',\n  'borderRightWidth',\n  'borderStyle',\n  'borderTopColor',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n  'borderTopWidth',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop'\n];\n\nconst pickBorderBox = pick(borderBoxProps);\nconst omitBorderBox = omit(borderBoxProps);\n\n/**\n * A utility to separate box model styles and other styles. Useful when one wants\n * to wrap a text element in a view to benefit from padding vertical,\n * borders... etc.\n *\n * @param styles - The native styles to split.\n */\nexport default function splitBoxModelStyle(\n  style: ReturnType<TNodeShape<TNodeType>['getNativeStyles']>\n) {\n  return {\n    boxModelStyle: pickBorderBox(style),\n    otherStyle: omitBorderBox(style)\n  };\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getNativePropsForTNode;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar empty = {};\n\nfunction getNativePropsForTNode(props) {\n  var _tnode$getReactNative, _ref;\n\n  var tnode = props.tnode,\n      style = props.style,\n      type = props.type,\n      passedNativeProps = props.nativeProps,\n      onPress = props.onPress,\n      overridenChildren = props.children,\n      propsForChildren = props.propsForChildren,\n      viewProps = props.viewProps,\n      textProps = props.textProps,\n      TNodeChildrenRenderer = props.TNodeChildrenRenderer;\n  var children = overridenChildren || (tnode.type === 'text' ? tnode.data : _react.default.createElement(TNodeChildrenRenderer, {\n    tnode: tnode,\n    propsForChildren: propsForChildren\n  }));\n  var switchProp = type === 'block' ? viewProps : textProps;\n  var propsFromModel = ((_tnode$getReactNative = tnode.getReactNativeProps()) === null || _tnode$getReactNative === void 0 ? void 0 : _tnode$getReactNative[type === 'block' ? 'view' : 'text']) || empty;\n  var syntheticOnPress = (_ref = onPress !== null && onPress !== void 0 ? onPress : passedNativeProps === null || passedNativeProps === void 0 ? void 0 : passedNativeProps.onPress) !== null && _ref !== void 0 ? _ref : propsFromModel.onPress;\n\n  var nativeProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, typeof syntheticOnPress === 'function' ? {\n    accessibilityRole: type === 'block' ? 'button' : 'link'\n  } : null), propsFromModel), passedNativeProps), switchProp), {}, {\n    children: children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps === null || passedNativeProps === void 0 ? void 0 : passedNativeProps.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  });\n\n  return nativeProps;\n}","map":{"version":3,"sources":["getNativePropsForTNode.ts"],"names":["empty","nativeProps","children","TNodeChildrenRenderer","overridenChildren","tnode","propsForChildren","switchProp","type","propsFromModel","syntheticOnPress","onPress","passedNativeProps","accessibilityRole","style","testID","undefined"],"mappings":";;;;;;;;;;;;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;AAIA,IAAMA,KAAU,GAAhB,EAAA;;AA2Be,SAAA,sBAAA,CAAA,KAAA,EAIwD;EAAA,IAAA,qBAAA,EAAA,IAAA;;EACrE,IAAM,KAAN,GAAA,KAAA,CAAM,KAAN;EAAA,IAAM,KAAN,GAAA,KAAA,CAAM,KAAN;EAAA,IAAM,IAAN,GAAA,KAAA,CAAM,IAAN;EAAA,IAAM,iBAAN,GAAA,KAAA,CAIEC,WAJF;EAAA,IAAM,OAAN,GAAA,KAAA,CAAM,OAAN;EAAA,IAAM,iBAAN,GAAA,KAAA,CAMEC,QANF;EAAA,IAAM,gBAAN,GAAA,KAAA,CAAM,gBAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAUEC,qBAVF,GAAA,KAAA,CAUEA,qBAVF;EAYA,IAAMD,QAAQ,GACZE,iBAAiB,KAChBC,KAAK,CAALA,IAAAA,KAAAA,MAAAA,GACIA,KAAD,CADHA,IAAAA,GAEG,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,qBAAA,EAA2C;IACzCA,KADyC,EACzCA,KADyC;IAEzCC,gBAAAA,EAAAA;EAFyC,CAA3C,CAHa,CADnB;EAQA,IAAMC,UAAU,GAAGC,IAAI,KAAJA,OAAAA,GAAAA,SAAAA,GAAnB,SAAA;EACA,IAAMC,cAAc,GAClB,CAAA,CAAA,qBAAA,GAAA,KAAK,CAAL,mBAAA,EAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAA8BD,IAAI,KAAJA,OAAAA,GAAAA,MAAAA,GAA9B,MAAA,CAAA,KADF,KAAA;EAEA,IAAME,gBAAgB,GAAA,CAAA,IAAA,GACpBC,OADoB,KAAA,IACpBA,IAAAA,OADoB,KAAA,KAAA,CACpBA,GADoB,OACpBA,GAAWC,iBADS,KAAA,IACTA,IAAAA,iBADS,KAAA,KAAA,CACTA,GADS,KAAA,CACTA,GAAAA,iBAAiB,CADR,OAAA,MAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GACqBH,cAAc,CADzD,OAAA;;EAEA,IAAMR,WAAkC,6EAClC,OAAA,gBAAA,KAAA,UAAA,GACC;IAAEY,iBAAiB,EAAEL,IAAI,KAAJA,OAAAA,GAAAA,QAAAA,GAA8B;EAAnD,CADD,GADqC,IAAH,GAAG,cAAH,GAAG,iBAAH,GAAG,UAAH;IAOtCN,QAPyC,EAOzCA,QAPsC;IAQtCS,OAAO,EARkC,gBAAH;IAStCG,KAAK,EAAE,CAAA,KAAA,EAAQF,iBAAR,KAAA,IAAQA,IAAAA,iBAAR,KAAA,KAAA,CAAQA,GAAR,KAAA,CAAQA,GAAAA,iBAAiB,CAAzB,KAAA,EAAkCL,UAAU,CATV,KASlC,CAT+B;IAUtCQ,MAAM,EAAEV,KAAK,CAALA,OAAAA,IAAiBW;EAVa,EAAxC;;EAYA,OAAA,WAAA;AACD","sourcesContent":["import { TBlock, TPhrasing, TText } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { TextProps, ViewProps } from 'react-native';\nimport { TDefaultRendererProps } from '../shared-types';\n\nconst empty: any = {};\n\n/**\n * Extract React Native props for a given {@link TNode}, such as those which\n * would be passed to `Text`, `View` or `GenericPressable` by `TDefaultRenderer`.\n *\n * This helper function is peculiarly useful when one wants a custom renderer\n * which uses a different native component, for example `Animated.Text` instead\n * of default `Text`.\n *\n * @public\n *\n * @example\n *\n * ```tsx\n * import React from 'react';\n * import { Animated } from 'react-native';\n * import { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n *\n * const AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n *   const nativeProps = getNativePropsForTNode(props);\n *   // This is equivalent to a TDefaultRenderer which `Text` is replaced\n *   // with Animated.Text\n *   return <Animated.Text {...nativeProps} />;\n * }\n * ```\n */\nexport default function getNativePropsForTNode<\n  T extends TPhrasing | TText | TBlock\n>(\n  props: TDefaultRendererProps<T>\n): T extends TBlock ? ViewProps & { onPress?: () => void } : TextProps {\n  const {\n    tnode,\n    style,\n    type,\n    nativeProps: passedNativeProps,\n    onPress,\n    children: overridenChildren,\n    propsForChildren,\n    viewProps,\n    textProps,\n    TNodeChildrenRenderer\n  } = props;\n  const children =\n    overridenChildren ||\n    (tnode.type === 'text'\n      ? (tnode as TText).data\n      : React.createElement(TNodeChildrenRenderer, {\n          tnode,\n          propsForChildren\n        }));\n  const switchProp = type === 'block' ? viewProps : textProps;\n  const propsFromModel =\n    tnode.getReactNativeProps()?.[type === 'block' ? 'view' : 'text'] || empty;\n  const syntheticOnPress =\n    onPress ?? passedNativeProps?.onPress ?? propsFromModel.onPress;\n  const nativeProps: TextProps | ViewProps = {\n    ...(typeof syntheticOnPress === 'function'\n      ? ({ accessibilityRole: type === 'block' ? 'button' : 'link' } as const)\n      : null),\n    ...propsFromModel,\n    ...passedNativeProps,\n    ...switchProp,\n    children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps?.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  };\n  return nativeProps as any;\n}\n"]},"metadata":{},"sourceType":"script"}
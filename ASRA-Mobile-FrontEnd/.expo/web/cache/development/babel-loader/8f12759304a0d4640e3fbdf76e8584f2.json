{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"style\", \"children\", \"borderless\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GenericPressable;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _SharedPropsProvider = require(\"./context/SharedPropsProvider\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction GenericPressable(_ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      _ref$borderless = _ref.borderless,\n      borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n      otherProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _ref2 = (0, _SharedPropsProvider.useSharedProps)(),\n      pressableHightlightColor = _ref2.pressableHightlightColor,\n      UserProvidedPressable = _ref2.GenericPressable;\n\n  if (UserProvidedPressable) {\n    return _react.default.createElement(UserProvidedPressable, _extends({\n      style: style,\n      borderless: borderless\n    }, otherProps), children);\n  }\n\n  if (_reactNative.Platform.OS === 'android') {\n    return _react.default.createElement(_reactNative.View, {\n      style: style\n    }, _react.default.createElement(_reactNative.TouchableNativeFeedback, _extends({\n      useForeground: true,\n      background: _reactNative.TouchableNativeFeedback.Ripple(pressableHightlightColor, borderless)\n    }, otherProps), _react.default.createElement(_reactNative.View, {\n      testID: \"generic-pressable\"\n    }, children)));\n  }\n\n  return _react.default.createElement(_reactNative.TouchableHighlight, _extends({\n    underlayColor: pressableHightlightColor,\n    style: style\n  }, otherProps), _react.default.createElement(_reactNative.View, {\n    testID: \"generic-pressable\"\n  }, children));\n}","map":{"version":3,"sources":["GenericPressable.tsx"],"names":["borderless","otherProps","GenericPressable","UserProvidedPressable","Platform","style","TouchableNativeFeedback"],"mappings":";;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAOA,IAAA,oBAAA,GAAA,OAAA,iCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGe,SAAA,gBAAA,OAK8B;EAAA,IALJ,KAKI,QALJ,KAKI;EAAA,IALJ,QAKI,QALJ,QAKI;EAAA,2BAF3CA,UAE2C;EAAA,IAF3CA,UAE2C,gCALJ,KAKI;EAAA,IADxCC,UACwC;;EAC3C,YACE,CAAA,GAAA,oBAAA,CADF,cACE,GADF;EAAA,IAAM,wBAAN,SAAM,wBAAN;EAAA,IAAoDE,qBAApD,SAAkCD,gBAAlC;;EAEA,IAAA,qBAAA,EAA2B;IACzB,OACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,qBAAA,EAAA,QAAA,CAAA;MACE,KAAK,EADP,KAAA;MAEE,UAAU,EAAEF;IAFd,CAAA,EAAA,UAAA,CAAA,EADF,QACE,CADF;EAQD;;EACD,IAAII,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAJ,SAAA,EAA+B;IAG7B,OACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;MAAM,KAAK,EAAEC;IAAb,CAAA,EACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,uBAAA,EAAA,QAAA,CAAA;MACE,aAAa,EADf,IAAA;MAEE,UAAU,EAAEC,YAAAA,CAAAA,uBAAAA,CAAAA,MAAAA,CAAAA,wBAAAA,EAAAA,UAAAA;IAFd,CAAA,EAAA,UAAA,CAAA,EAOE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;MAAM,MAAM,EAAC;IAAb,CAAA,EATN,QASM,CAPF,CADF,CADF;EAaD;;EACD,OACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,kBAAA,EAAA,QAAA,CAAA;IACE,aAAa,EADf,wBAAA;IAEE,KAAK,EAAED;EAFT,CAAA,EAAA,UAAA,CAAA,EAIE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;IAAM,MAAM,EAAC;EAAb,CAAA,EALJ,QAKI,CAJF,CADF;AAQD","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport {\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  View\n} from 'react-native';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { GenericPressableProps } from './shared-types';\n\nexport default function GenericPressable({\n  style,\n  children,\n  borderless = false,\n  ...otherProps\n}: PropsWithChildren<GenericPressableProps>) {\n  const { pressableHightlightColor, GenericPressable: UserProvidedPressable } =\n    useSharedProps();\n  if (UserProvidedPressable) {\n    return (\n      <UserProvidedPressable\n        style={style}\n        borderless={borderless}\n        {...(otherProps as any)}>\n        {children}\n      </UserProvidedPressable>\n    );\n  }\n  if (Platform.OS === 'android') {\n    // TouchableNativeFeedback does not support a\n    // style prop. So we must wrap it inside a View.\n    return (\n      <View style={style}>\n        <TouchableNativeFeedback\n          useForeground\n          background={TouchableNativeFeedback.Ripple(\n            pressableHightlightColor,\n            borderless\n          )}\n          {...(otherProps as any)}>\n          <View testID=\"generic-pressable\">{children}</View>\n        </TouchableNativeFeedback>\n      </View>\n    );\n  }\n  return (\n    <TouchableHighlight\n      underlayColor={pressableHightlightColor}\n      style={style}\n      {...(otherProps as any)}>\n      <View testID=\"generic-pressable\">{children}</View>\n    </TouchableHighlight>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}
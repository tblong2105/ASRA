{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function Test(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      var _response$notificatio, _response$notificatio2, _response$notificatio3;\n\n      var notificationData = response == null ? void 0 : (_response$notificatio = response.notification) == null ? void 0 : (_response$notificatio2 = _response$notificatio.request) == null ? void 0 : (_response$notificatio3 = _response$notificatio2.content) == null ? void 0 : _response$notificatio3.data;\n      navigation.navigate(\"PreviewContract\", {\n        contractId: notificationData == null ? void 0 : notificationData.contractId\n      });\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"space-around\"\n    },\n    children: [_jsxs(Text, {\n      children: [\"Your expo push token: \", expoPushToken]\n    }), _jsxs(View, {\n      style: {\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: [_jsxs(Text, {\n        children: [\"Title: \", notification && notification.request.content.title, \" \"]\n      }), _jsxs(Text, {\n        children: [\"Body: \", notification && notification.request.content.body]\n      }), _jsxs(Text, {\n        children: [\"Data:\", \" \", notification && JSON.stringify(notification.request.content.data)]\n      })]\n    }), _jsx(Button, {\n      title: \"Press to schedule a notification\",\n      onPress: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(schedulePushNotification());\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    })]\n  });\n}\n\nfunction schedulePushNotification() {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: \"ASRA - Create Contract \\uD83D\\uDCEC\",\n              body: \"Test message\",\n              data: {\n                contractId: 20\n              },\n              sound: \"../../assets/sound/notification-sound.wav\"\n            },\n            trigger: {\n              seconds: 2\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Device.isDevice) {\n            _context4.next = 20;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context4.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== \"granted\")) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context4.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== \"granted\")) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert(\"Failed to get push token for push notification!\");\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          _context4.next = 21;\n          break;\n\n        case 20:\n          alert(\"Must use physical device for Push Notifications\");\n\n        case 21:\n          if (!(Platform.OS === \"android\")) {\n            _context4.next = 24;\n            break;\n          }\n\n          _context4.next = 24;\n          return _regeneratorRuntime.awrap(Notifications.setNotificationChannelAsync(\"default\", {\n            name: \"default\",\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: \"#FF231F7C\"\n          }));\n\n        case 24:\n          return _context4.abrupt(\"return\", token);\n\n        case 25:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["Device","Notifications","React","useState","useEffect","useRef","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","Test","props","navigation","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","notificationData","request","content","data","navigate","contractId","removeNotificationSubscription","flex","alignItems","justifyContent","title","body","JSON","stringify","schedulePushNotification","scheduleNotificationAsync","sound","trigger","seconds","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"sources":["/Users/macbook/Documents/00.ASRA/ASRA-Mobile-FrontEnd/src/screens/profile/Test.jsx"],"sourcesContent":["import * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Text, View, Button, Platform } from \"react-native\";\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function Test(props) {\n  const { navigation } = props;\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then((token) =>\n      setExpoPushToken(token)\n    );\n\n    notificationListener.current =\n      Notifications.addNotificationReceivedListener((notification) => {\n        setNotification(notification);\n      });\n\n    responseListener.current =\n      Notifications.addNotificationResponseReceivedListener((response) => {\n        let notificationData = response?.notification?.request?.content?.data;\n        navigation.navigate(\"PreviewContract\", {\n          contractId: notificationData?.contractId,\n        });\n      });\n\n    return () => {\n      Notifications.removeNotificationSubscription(\n        notificationListener.current\n      );\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"space-around\",\n      }}\n    >\n      <Text>Your expo push token: {expoPushToken}</Text>\n      <View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n        <Text>\n          Title: {notification && notification.request.content.title}{\" \"}\n        </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>\n          Data:{\" \"}\n          {notification && JSON.stringify(notification.request.content.data)}\n        </Text>\n      </View>\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification();\n        }}\n      />\n    </View>\n  );\n}\n\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: `ASRA - Create Contract 📬`,\n      body: `Test message`,\n      data: { contractId: 20 },\n      sound: \"../../assets/sound/notification-sound.wav\",\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Device.isDevice) {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      alert(\"Failed to get push token for push notification!\");\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n  } else {\n    alert(\"Must use physical device for Push Notifications\");\n  }\n\n  if (Platform.OS === \"android\") {\n    await Notifications.setNotificationChannelAsync(\"default\", {\n      name: \"default\",\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: \"#FF231F7C\",\n    });\n  }\n\n  return token;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
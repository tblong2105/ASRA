{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = collapseTopMarginForChild;\n\nvar _getCollapsedMarginTop = _interopRequireDefault(require(\"./getCollapsedMarginTop\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isCollapsible(tnode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\nfunction collapseTopMarginForChild(n, tchildren) {\n  var childTnode = tchildren[n];\n\n  if (isCollapsible(childTnode) && n > 0 && isCollapsible(tchildren[n - 1])) {\n    return (0, _getCollapsedMarginTop.default)(tchildren[n - 1], childTnode);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["collapseTopMarginForChild.ts"],"names":["tnode","childTnode","tchildren","isCollapsible","n"],"mappings":";;;;;;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA;;;;;;;;AAEA,SAAA,aAAA,CAAA,KAAA,EAAqC;EACnC,OAAOA,KAAK,CAALA,IAAAA,KAAAA,OAAAA,IAA0BA,KAAK,CAALA,IAAAA,KAAjC,UAAA;AACD;;AAWc,SAAA,yBAAA,CAAA,CAAA,EAAA,SAAA,EAGE;EACf,IAAMC,UAAU,GAAGC,SAAS,CAA5B,CAA4B,CAA5B;;EACA,IAAIC,aAAa,CAAbA,UAAa,CAAbA,IAA6BC,CAAC,GAA9BD,CAAAA,IAAsCA,aAAa,CAACD,SAAS,CAACE,CAAC,GAAnE,CAAiE,CAAV,CAAvD,EAA2E;IACzE,OAAO,CAAA,GAAA,sBAAA,CAAA,OAAA,EAAsBF,SAAS,CAACE,CAAC,GAAjC,CAA+B,CAA/B,EAAP,UAAO,CAAP;EACD;;EACD,OAAA,IAAA;AACD","sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport getCollapsedMarginTop from './getCollapsedMarginTop';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * Compute top collapsed margin for the nth {@link TNode}-child of a list of\n * TNodes.\n *\n * @param n - The index for which the top margin should be collapsed.\n * @param tchildren - The list of {@link TNode} children.\n * @returns `null` when no margin collapsing should apply, a number otherwise.\n * @public\n */\nexport default function collapseTopMarginForChild(\n  n: number,\n  tchildren: readonly TNode[]\n): number | null {\n  const childTnode = tchildren[n];\n  if (isCollapsible(childTnode) && n > 0 && isCollapsible(tchildren[n - 1])) {\n    return getCollapsedMarginTop(tchildren[n - 1], childTnode);\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}
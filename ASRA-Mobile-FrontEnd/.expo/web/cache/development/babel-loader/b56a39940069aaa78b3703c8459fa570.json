{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef, useContext, useCallback } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { SocketContext } from \"../../app/socket\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function App() {\n  var socket = useContext(SocketContext);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  var getNotification = useCallback(function _callee(data) {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(schedulePushNotification(data == null ? void 0 : data.message));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  useEffect(function () {\n    socket == null ? void 0 : socket.on(\"getNotification\", getNotification);\n    return function () {\n      socket.off(\"getNotification\", getNotification);\n    };\n  }, [socket, getNotification]);\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {});\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  return _jsx(_Fragment, {});\n}\n\nfunction schedulePushNotification(message) {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: \"You've got mail! ðŸ“¬\",\n              body: message,\n              data: {\n                data: \"goes here\"\n              }\n            },\n            trigger: {\n              seconds: 2\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Device.isDevice) {\n            _context4.next = 20;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context4.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== \"granted\")) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context4.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== \"granted\")) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert(\"Failed to get push token for push notification!\");\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          _context4.next = 21;\n          break;\n\n        case 20:\n          alert(\"Must use physical device for Push Notifications\");\n\n        case 21:\n          if (Platform.OS === \"android\") {\n            Notifications.setNotificationChannelAsync(\"default\", {\n              name: \"default\",\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: \"#FF231F7C\"\n            });\n          }\n\n          return _context4.abrupt(\"return\", token);\n\n        case 23:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","useCallback","Device","Notifications","SocketContext","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","socket","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","getNotification","data","schedulePushNotification","message","on","off","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","removeNotificationSubscription","scheduleNotificationAsync","content","title","body","trigger","seconds","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"sources":["/Users/macbook/Documents/00.ASRA/ASRA-Mobile-FrontEnd/src/components/notification/Notification.jsx"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  useContext,\n  useCallback,\n} from \"react\";\nimport { Text, View, Button, Platform } from \"react-native\";\n\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { SocketContext } from \"../../app/socket\";\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const socket = useContext(SocketContext);\n\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  const getNotification = useCallback(async (data) => {\n    await schedulePushNotification(data?.message);\n  }, []);\n\n  useEffect(() => {\n    socket?.on(\"getNotification\", getNotification);\n\n    return () => {\n      socket.off(\"getNotification\", getNotification);\n    };\n  }, [socket, getNotification]);\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then((token) => {\n      setExpoPushToken(token);\n    });\n\n    notificationListener.current =\n      Notifications.addNotificationReceivedListener((notification) => {\n        setNotification(notification);\n      });\n\n    responseListener.current =\n      Notifications.addNotificationResponseReceivedListener((response) => {});\n\n    return () => {\n      Notifications.removeNotificationSubscription(\n        notificationListener.current\n      );\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return <></>;\n}\n\nasync function schedulePushNotification(message) {\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: \"You've got mail! ðŸ“¬\",\n      body: message,\n      data: { data: \"goes here\" },\n    },\n    trigger: { seconds: 2 },\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Device.isDevice) {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      alert(\"Failed to get push token for push notification!\");\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n  } else {\n    alert(\"Must use physical device for Push Notifications\");\n  }\n\n  if (Platform.OS === \"android\") {\n    Notifications.setNotificationChannelAsync(\"default\", {\n      name: \"default\",\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: \"#FF231F7C\",\n    });\n  }\n\n  return token;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar _identity = _interopRequireDefault(require(\"ramda/src/identity\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar useProfiler = typeof __DEV__ === 'boolean' && __DEV__ && typeof performance === 'object' ? function useProfiler(_ref) {\n  var name = _ref.name,\n      prop = _ref.prop;\n  var lastUpdate = (0, _react.useRef)(0);\n  var profile = (0, _react.useCallback)(function onUpdate() {\n    var now = performance.now();\n    var diff = now - lastUpdate.current;\n\n    if (diff < 60) {\n      console.warn(\"You seem to update \" + (prop ? \"the \" + prop + \" prop(s)\" : 'props') + \" of the \\\"\" + (name ? name : 'RenderHTML') + \"\\\" component in short periods of time, causing costly tree rerenders (last update was \" + diff.toFixed(2) + \"ms ago). See https://stackoverflow.com/q/68966120/2779871\");\n    }\n\n    lastUpdate.current = now;\n  }, [name, prop]);\n  return profile;\n} : function useProfiler() {\n  return _identity.default;\n};\nvar _default = useProfiler;\nexports.default = _default;","map":{"version":3,"sources":["useProfiler.ts"],"names":["useProfiler","prop","lastUpdate","profile","now","performance","diff","console","name","identity"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;;;;;;;AAIA,IAAMA,WAAW,GACf,OAAA,OAAA,KAAA,SAAA,IAAA,OAAA,IAA2C,OAAA,WAAA,KAA3C,QAAA,GACI,SAAA,WAAA,OAAuE;EAAA,IAAlD,IAAkD,QAAlD,IAAkD;EAAA,IAA1CC,IAA0C,QAA1CA,IAA0C;EACrE,IAAMC,UAAU,GAAG,CAAA,GAAA,MAAA,CAAA,MAAA,EAAnB,CAAmB,CAAnB;EACA,IAAMC,OAAO,GAAG,CAAA,GAAA,MAAA,CAAA,WAAA,EACd,SAAA,QAAA,GAAoB;IAClB,IAAMC,GAAG,GAAGC,WAAW,CAAvB,GAAYA,EAAZ;IACA,IAAMC,IAAI,GAAGF,GAAG,GAAGF,UAAU,CAA7B,OAAA;;IACA,IAAII,IAAI,GAAR,EAAA,EAAe;MACbC,OAAO,CAAPA,IAAAA,0BAEIN,IAAI,YAAA,IAAA,gBAA2B,OAFnCM,oBAIIC,IAAI,GAAA,IAAA,GAAU,YAJlBD,+FAK0FD,IAAI,CAAJA,OAAAA,CAL1FC,CAK0FD,CAL1FC;IASD;;IACDL,UAAU,CAAVA,OAAAA,GAAAA,GAAAA;EAfY,CAAA,EAiBd,CAAA,IAAA,EAjBF,IAiBE,CAjBc,CAAhB;EAmBA,OAAA,OAAA;AAtBN,CAAA,GAyBI,SAAA,WAAA,GAAuB;EACrB,OAAOO,SAAAA,CAAP,OAAA;AA3BR,CAAA;eA8BeT,W","sourcesContent":["import { useCallback, useRef } from 'react';\nimport identity from 'ramda/src/identity';\n\ndeclare const performance: { now: () => number };\n\nconst useProfiler =\n  typeof __DEV__ === 'boolean' && __DEV__ && typeof performance === 'object'\n    ? function useProfiler({ name, prop }: { name?: string; prop?: string }) {\n        const lastUpdate = useRef(0);\n        const profile = useCallback(\n          function onUpdate() {\n            const now = performance.now();\n            const diff = now - lastUpdate.current;\n            if (diff < 60) {\n              console.warn(\n                `You seem to update ${\n                  prop ? `the ${prop} prop(s)` : 'props'\n                } of the \"${\n                  name ? name : 'RenderHTML'\n                }\" component in short periods of time, causing costly tree rerenders (last update was ${diff.toFixed(\n                  2\n                )}ms ago). See https://stackoverflow.com/q/68966120/2779871`\n              );\n            }\n            lastUpdate.current = now;\n          },\n          [name, prop]\n        );\n        return profile;\n      }\n    : /* istanbul ignore next */\n      function useProfiler() {\n        return identity as () => void;\n      };\n\nexport default useProfiler;\n"]},"metadata":{},"sourceType":"script"}
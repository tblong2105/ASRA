{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTNodeChildrenProps = useTNodeChildrenProps;\nexports.default = void 0;\n\nvar _SharedPropsProvider = require(\"./context/SharedPropsProvider\");\n\nvar _TChildrenRenderer = require(\"./TChildrenRenderer\");\n\nvar _renderChildren = _interopRequireDefault(require(\"./renderChildren\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isCollapsible(tnode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\nfunction useTNodeChildrenProps(_ref) {\n  var tnode = _ref.tnode,\n      propsForChildren = _ref.propsForChildren,\n      _ref$disableMarginCol = _ref.disableMarginCollapsing,\n      disableMarginCollapsing = _ref$disableMarginCol === void 0 ? false : _ref$disableMarginCol,\n      renderChild = _ref.renderChild;\n\n  var _ref2 = (0, _SharedPropsProvider.useSharedProps)(),\n      enableExperimentalMarginCollapsing = _ref2.enableExperimentalMarginCollapsing;\n\n  var shouldCollapseChildren = enableExperimentalMarginCollapsing && !disableMarginCollapsing && isCollapsible(tnode);\n  return {\n    propsForChildren: propsForChildren,\n    disableMarginCollapsing: !shouldCollapseChildren,\n    tchildren: tnode.children,\n    renderChild: renderChild\n  };\n}\n\nfunction TNodeChildrenRenderer(props) {\n  if (props.tnode.type === 'text') {\n    return props.tnode.data;\n  }\n\n  return (0, _renderChildren.default)(useTNodeChildrenProps(props));\n}\n\nTNodeChildrenRenderer.defaultProps = _TChildrenRenderer.tchildrenRendererDefaultProps;\nvar _default = TNodeChildrenRenderer;\nexports.default = _default;","map":{"version":3,"sources":["TNodeChildrenRenderer.tsx"],"names":["tnode","disableMarginCollapsing","renderChild","enableExperimentalMarginCollapsing","shouldCollapseChildren","isCollapsible","propsForChildren","tchildren","props","useTNodeChildrenProps","TNodeChildrenRenderer","tchildrenRendererDefaultProps"],"mappings":";;;;;;;;AAEA,IAAA,oBAAA,GAAA,OAAA,iCAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,uBAAA;;AAKA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;;;;;;;AAEA,SAAA,aAAA,CAAA,KAAA,EAAqC;EACnC,OAAOA,KAAK,CAALA,IAAAA,KAAAA,OAAAA,IAA0BA,KAAK,CAALA,IAAAA,KAAjC,UAAA;AACD;;AA4BM,SAAA,qBAAA,OAKgD;EAAA,IALjB,KAKiB,QALjB,KAKiB;EAAA,IALjB,gBAKiB,QALjB,gBAKiB;EAAA,iCAFrDC,uBAEqD;EAAA,IAFrDA,uBAEqD,sCALjB,KAKiB;EAAA,IADrDC,WACqD,QADrDA,WACqD;;EACrD,YAA+C,CAAA,GAAA,oBAAA,CAA/C,cAA+C,GAA/C;EAAA,IAAQC,kCAAR,SAAQA,kCAAR;;EACA,IAAMC,sBAAsB,GAC1BD,kCAAkC,IAClC,CADAA,uBAAAA,IAEAE,aAAa,CAHf,KAGe,CAHf;EAIA,OAAO;IACLC,gBADK,EACLA,gBADK;IAELL,uBAAuB,EAAE,CAFpB,sBAAA;IAGLM,SAAS,EAAEP,KAAK,CAHX,QAAA;IAILE,WAAAA,EAAAA;EAJK,CAAP;AAMD;;AAKD,SAAA,qBAAA,CAAA,KAAA,EAEgB;EACd,IAAIM,KAAK,CAALA,KAAAA,CAAAA,IAAAA,KAAJ,MAAA,EAAiC;IAE/B,OAAOA,KAAK,CAALA,KAAAA,CAAP,IAAA;EAHY;;EAQd,OAAO,CAAA,GAAA,eAAA,CAAA,OAAA,EAAeC,qBAAqB,CAA3C,KAA2C,CAApC,CAAP;AACD;;AAKDC,qBAAqB,CAArBA,YAAAA,GAAqCC,kBAAAA,CAArCD,6BAAAA;eAEeA,qB","sourcesContent":["import { ReactElement } from 'react';\nimport { TNode } from '@native-html/transient-render-engine';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { tchildrenRendererDefaultProps } from './TChildrenRenderer';\nimport {\n  TChildrenRendererProps,\n  TNodeChildrenRendererProps\n} from './shared-types';\nimport renderChildren from './renderChildren';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * A hook especially useful when one need to tamper with children in a custom\n * renderer. Should be used with {@link TChildrenRenderer}.\n *\n * @example\n * For example, a custom renderer which inserts ads in an article:\n *\n * ```tsx\n * function ArticleRenderer(props) {\n *   const { tnode, TDefaultRenderer, ...defaultRendererProps } = props;\n *   const tchildrenProps = useTNodeChildrenProps(props);\n *   const firstChildrenChunk = tnode.children.slice(0, 2);\n *   const secondChildrenChunk = tnode.children.slice(2, 4);\n *   const thirdChildrenChunk = tnode.children.slice(4, 5);\n *   return (\n *     <TDefaultRenderer tnode={tnode} {...defaultRendererProps}>\n *       <TChildrenRenderer {...tchildrenProps} tchildren={firstChildrenChunk} />\n *       {firstChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={secondChildrenChunk} />\n *       {secondChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={thirdChildrenChunk} />\n *     </TDefaultRenderer>\n *   );\n * };\n * ```\n */\nexport function useTNodeChildrenProps({\n  tnode,\n  propsForChildren,\n  disableMarginCollapsing = false,\n  renderChild\n}: TNodeChildrenRendererProps): TChildrenRendererProps {\n  const { enableExperimentalMarginCollapsing } = useSharedProps();\n  const shouldCollapseChildren =\n    enableExperimentalMarginCollapsing &&\n    !disableMarginCollapsing &&\n    isCollapsible(tnode);\n  return {\n    propsForChildren,\n    disableMarginCollapsing: !shouldCollapseChildren,\n    tchildren: tnode.children,\n    renderChild\n  };\n}\n\n/**\n * A component to render all children of a {@link TNode}.\n */\nfunction TNodeChildrenRenderer(\n  props: TNodeChildrenRendererProps\n): ReactElement {\n  if (props.tnode.type === 'text') {\n    // see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return props.tnode.data as unknown as ReactElement;\n  }\n  // A tnode type will never change. We can safely\n  // ignore the non-conditional rule of hooks.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return renderChildren(useTNodeChildrenProps(props));\n}\n\n/**\n * @ignore\n */\nTNodeChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;\n\nexport default TNodeChildrenRenderer;\n"]},"metadata":{},"sourceType":"script"}